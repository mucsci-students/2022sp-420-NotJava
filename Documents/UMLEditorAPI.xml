<?xml version="1.0"?>

-
<doc>


-
	<assembly>
		<name>UMLEditor</name>
	</assembly>


-
	<members>


-
		<member name="M:UMLEditor.Classes.AttributeObject.ToString">
			<summary>Stringifies Attribute </summary>
			<returns>Formatted string of attribute</returns>
		</member>


-
		<member name="M:UMLEditor.Classes.AttributeObject.AttRename(System.String)">
			<summary>Renames attribute. Checks to make sure name is validPre condition: attribute "name" does not exist </summary>
			<param name="name">Name to rename attribute to</param>
		</member>


-
		<member name="M:UMLEditor.Classes.AttributeObject.CheckValidAttributeName(System.String)">
			<summary>Checks if the provided name is a valid attribute name. </summary>
			<param name="name">The name to test.</param>
			<exception cref="T:UMLEditor.Exceptions.InvalidNameException">If the provided name is invalid.</exception>
		</member>


-
		<member name="M:UMLEditor.Classes.Class.#ctor">
			<summary>Default constructor for class </summary>
		</member>


-
		<member name="M:UMLEditor.Classes.Class.#ctor(System.String)">
			<summary>Constructor for class "name" </summary>
			<param name="name">Name of the class being created</param>
			<param name="withFields">(Optional) A list of fields to include in this class</param>
			<exception cref="T:UMLEditor.Exceptions.InvalidNameException">Thrown if the name provided is invalid</exception>
		</member>


-
		<member name="M:UMLEditor.Classes.Class.#ctor(UMLEditor.Classes.Class)">
			<summary>Copy constructor </summary>
			<param name="c">Class object to copy</param>
		</member>


-
		<member name="M:UMLEditor.Classes.Class.AddField(System.String,System.String)">
			<summary>Adds field to class.Pre-condition: name of field is valid </summary>
			<param name="type">Valid type of new field</param>
			<param name="name">Valid name of new field</param>
		</member>


-
		<member name="M:UMLEditor.Classes.Class.AddMethod(System.String,System.String)">
			<summary>Adds method to class.Pre-condition: name of method is valid </summary>
			<param name="returnType">Valid returnType of new method</param>
			<param name="name">Valid name of new method</param>
		</member>


-
		<member name="M:UMLEditor.Classes.Class.FieldExists(System.String)">
			<summary>Check if specified Field exists. </summary>
			<param name="name">Name of the Field you are checking</param>
			<returns>Returns true if exists, false if not.</returns>
		</member>


-
		<member name="M:UMLEditor.Classes.Class.GetFieldByName(System.String)">
			<summary>Finds the field with the specified name, if it exists </summary>
			<param name="name">Name of field you are looking for</param>
			<returns>Returns the field if exists, or null if it does not</returns>
		</member>


-
		<member name="M:UMLEditor.Classes.Class.MethodExists(System.String)">
			<summary>Check if specified method exists. </summary>
			<param name="name">Name of the method you are checking</param>
			<returns>Returns true if exists, false if not.</returns>
		</member>


-
		<member name="M:UMLEditor.Classes.Class.GetMethodByName(System.String)">
			<summary>Finds the method with the specified name, if it exists </summary>
			<param name="name">Name of method you are looking for</param>
			<returns>Returns the method if it exists, or null if it does not</returns>
		</member>


-
		<member name="M:UMLEditor.Classes.Class.DeleteField(System.String)">
			<summary>Deletes a field within this class. </summary>
			<param name="targetField">Field to be deleted</param>
			<exception cref="T:UMLEditor.Exceptions.AttributeNonexistentException">Thrown if field does not exist</exception>
		</member>


-
		<member name="M:UMLEditor.Classes.Class.DeleteMethod(System.String)">
			<summary>Deletes a method within this class. </summary>
			<param name="targetMethod">Method to be deleted</param>
			<exception cref="T:UMLEditor.Exceptions.AttributeNonexistentException">Thrown if method does not exist</exception>
		</member>


-
		<member name="M:UMLEditor.Classes.Class.ListAttributes">
			<summary>Lists the attributes within the class or a message that there are no attributes </summary>
			<returns>A string containing all attributes of the class, separated by new lines.</returns>
		</member>


-
		<member name="M:UMLEditor.Classes.Class.ListFields">
			<summary>Lists the fields within the class or a message that there are none. </summary>
			<returns>A string containing all fields of the class, separated by new lines.</returns>
		</member>


-
		<member name="M:UMLEditor.Classes.Class.ListMethods">
			<summary>Lists the methods within the class or a message that there are none. </summary>
			<returns>A string containing all methods of the class, separated by new lines.</returns>
		</member>


-
		<member name="M:UMLEditor.Classes.Class.RenameField(System.String,System.String)">
			<summary>Renames a field </summary>
			<param name="oldName">Field to rename</param>
			<param name="newName">New name of field</param>
			<exception cref="T:UMLEditor.Exceptions.AttributeNonexistentException">Thrown if oldName field does not exist</exception>
			<exception cref="T:UMLEditor.Exceptions.AttributeAlreadyExistsException">Thrown if newName field already exists</exception>
			<exception cref="T:UMLEditor.Exceptions.InvalidNameException">Thrown if the provided name is invalid.</exception>
		</member>


-
		<member name="M:UMLEditor.Classes.Class.RenameMethod(System.String,System.String)">
			<summary>Renames a method </summary>
			<param name="oldName">Method to rename</param>
			<param name="newName">New name of method</param>
			<exception cref="T:UMLEditor.Exceptions.AttributeNonexistentException">Thrown if oldName method does not exist</exception>
			<exception cref="T:UMLEditor.Exceptions.AttributeAlreadyExistsException">Thrown if newName method already exists</exception>
			<exception cref="T:UMLEditor.Exceptions.InvalidNameException">Thrown if the provided name is invalid.</exception>
		</member>


-
		<member name="M:UMLEditor.Classes.Class.CheckValidClassName(System.String)">
			<summary>Checks if a given class name is valid. Throws an exception if not </summary>
			<param name="name">Name that is checked for validity</param>
			<exception cref="T:UMLEditor.Exceptions.InvalidNameException">Thrown if the name is not valid</exception>
		</member>


-
		<member name="M:UMLEditor.Classes.Class.Rename(System.String)">
			<summary>Renames class. Checks to ensure name is validPre-condition: Class "name" does not already exist </summary>
			<param name="name">Name to rename class to</param>
		</member>


-
		<member name="M:UMLEditor.Classes.Diagram.#ctor">
			<summary>Default constructor for a new Diagram. </summary>
		</member>


-
		<member name="M:UMLEditor.Classes.Diagram.ClassExists(System.String)">
			<summary>Check if specified class exists. </summary>
			<param name="name">Name of the class you are checking</param>
			<returns>Returns true if exists, false if not.</returns>
		</member>


-
		<member name="M:UMLEditor.Classes.Diagram.IsClassInRelationship(System.String)">
			<summary>Check if class is currently used in a relationship. </summary>
			<param name="name">Name of the class you are checking</param>
			<returns>Returns true if class is in a relationship in the diagram, false if not.</returns>
		</member>


-
		<member name="M:UMLEditor.Classes.Diagram.RelationshipExists(System.String,System.String)">
			<summary>Checks if a relationship between the two classes. </summary>
			<param name="sourceName">The source class in the relationship</param>
			<param name="destName">The destination class in the relationship</param>
			<returns>True if the relationship exists, false otherwise</returns>
		</member>


-
		<member name="M:UMLEditor.Classes.Diagram.GetRelationshipByName(System.String,System.String)">
			<summary>Gets the relationship between the two classes, if it exists. </summary>
			<param name="sourceName">The source class in the relationship</param>
			<param name="destName">The destination class in the relationship</param>
			<returns>The found relationship object, or null if none exists</returns>
		</member>


-
		<member name="M:UMLEditor.Classes.Diagram.GetClassByName(System.String)">
			<summary>Finds the class with the specified name, if it exists </summary>
			<param name="name">Name of class you are looking for</param>
			<returns>Returns the class if exists, or null if it does not</returns>
		</member>


-
		<member name="M:UMLEditor.Classes.Diagram.AddRelationship(System.String,System.String,System.String)">
			<summary>Creates a relationship between the two classes, if they exist </summary>
			<param name="sourceClassName">The source class for the relationship</param>
			<param name="destClassName">The destination class for the relationship</param>
			<param name="relationshipType">The type of relationship</param>
			<exception cref="T:UMLEditor.Exceptions.ClassNonexistentException">If either class does not exist</exception>
			<exception cfef="InvalidRelationshipTypeException">If the given relationship type is not valid</exception>
		</member>


-
		<member name="M:UMLEditor.Classes.Diagram.AddClass(System.String)">
			<summary>Adds a class to the diagram. Ensures the desired class to add does not already exist </summary>
			<param name="className">The name of the class to add</param>
			<exception cref="T:UMLEditor.Exceptions.ClassAlreadyExistsException">Ensures there is not already a class by this name</exception>
		</member>


-
		<member name="M:UMLEditor.Classes.Diagram.DeleteClass(System.String)">
			<summary>Deletes the class that has the provided name </summary>
			<param name="className">The name of the class to delete</param>
			<exception cref="T:UMLEditor.Exceptions.ClassNonexistentException">If the provided class does not exist</exception>
			<exception cref="T:UMLEditor.Exceptions.ClassInUseException">If the class is currently involved in a relationship</exception>
		</member>


-
		<member name="M:UMLEditor.Classes.Diagram.RenameClass(System.String,System.String)">
			<summary>Renames a class oldName to newName </summary>
			<param name="oldName">The name of the class to rename</param>
			<param name="newName">The new name of the class</param>
			<exception cref="T:UMLEditor.Exceptions.ClassNonexistentException">Thrown if the class oldName does not exist</exception>
			<exception cref="T:UMLEditor.Exceptions.ClassAlreadyExistsException">Thrown if the class newName already exists</exception>
		</member>


-
		<member name="M:UMLEditor.Classes.Diagram.ListClasses">
			<summary>List all classes of the current diagram, or a message that there are no classes. </summary>
			<returns>A string containing all classes of the given diagram, separated by new lines.</returns>
		</member>


-
		<member name="M:UMLEditor.Classes.Diagram.ListRelationships">
			<summary>List all relationships in the current diagram, or a message that there are no relationships. </summary>
			<returns>A string containing all relationships of the given diagram, separated by new lines.</returns>
		</member>


-
		<member name="M:UMLEditor.Classes.Diagram.DeleteRelationship(System.String,System.String)">
			<summary>Deletes the provided relationship, if it exists </summary>
			<param name="sourceName">Source class in the relationship</param>
			<param name="destName">Destination class in the relationship</param>
			<exception cref="T:UMLEditor.Exceptions.RelationshipNonexistentException">If the relationship does not exist</exception>
		</member>


-
		<member name="M:UMLEditor.Classes.Diagram.GetInvolvedRelationships(System.String)">
			<summary>Returns a list of all relationships the provided class is involved with </summary>
			<param name="onClassName">The class to find relationships for</param>
			<returns>A list containing all relationships the provided class is involved with</returns>
		</member>


-
		<member name="M:UMLEditor.Classes.Method.#ctor">
			<summary>Default ctor </summary>
		</member>


-
		<member name="M:UMLEditor.Classes.Method.#ctor(System.String,System.String)">
			<summary>Constructs a new method with the provided name and (optionally) a list of parameters </summary>
			<param name="returnType">The type this method returns</param>
			<param name="withName">The name of the new method</param>
		</member>


-
		<member name="M:UMLEditor.Classes.Method.#ctor(UMLEditor.Classes.Method)">
			<summary>Copy constructor </summary>
			<param name="m">Method object to copy</param>
		</member>


-
		<member name="M:UMLEditor.Classes.Method.IsParamInList(UMLEditor.Classes.NameTypeObject)">
			<summary>Checks if given parameter is in the current parameter list using NameTypeObject </summary>
			<param name="param">Parameter to check</param>
			<returns>True if the given parameter is in the list, false otherwise</returns>
		</member>


-
		<member name="M:UMLEditor.Classes.Method.IsParamInList(System.String)">
			<summary>Checks if given parameter is in the current parameter list using name </summary>
			<param name="paramName">Name of the parameter to check</param>
			<returns>True if the given parameter is in the list, false otherwise</returns>
		</member>


-
		<member name="M:UMLEditor.Classes.Method.AddParam(UMLEditor.Classes.NameTypeObject)">
			<summary>Adds one parameter to the method </summary>
			<param name="param">Parameter to add to method</param>
			<exception cref="T:UMLEditor.Exceptions.AttributeAlreadyExistsException">If parameter name already exists</exception>
		</member>


-
		<member name="M:UMLEditor.Classes.Method.AddParam(System.Collections.Generic.List{UMLEditor.Classes.NameTypeObject})">
			<summary>Overloaded AddParam function to add multiple parameters to the method </summary>
			<param name="parameters">List of parameters to add to method</param>
			<exception cref="T:UMLEditor.Exceptions.AttributeAlreadyExistsException">If parameter name already exists in method</exception>
		</member>


-
		<member name="M:UMLEditor.Classes.Method.RemoveParam">
			<summary>Removes all parameters from method </summary>
		</member>


-
		<member name="M:UMLEditor.Classes.Method.RemoveParam(UMLEditor.Classes.NameTypeObject)">
			<summary>Overloaded function to remove parameter from method </summary>
			<param name="param">Parameter to remove from method</param>
			<exception cref="T:UMLEditor.Exceptions.AttributeNonexistentException">If the provided parameter is not in the list</exception>
		</member>


-
		<member name="M:UMLEditor.Classes.Method.ChangeParam(UMLEditor.Classes.NameTypeObject,UMLEditor.Classes.NameTypeObject)">
			<summary>Changes a single parameter of the method to the provided one </summary>
			<param name="oldParam">The existing parameter to replace</param>
			<param name="newParam">The new parameter to put in method</param>
			<exception cref="T:UMLEditor.Exceptions.AttributeNonexistentException">If oldParam does not exist in method</exception>
			<exception cref="T:UMLEditor.Exceptions.AttributeAlreadyExistsException">If newParam already exists in method</exception>
		</member>


-
		<member name="M:UMLEditor.Classes.Method.ChangeParam(System.Collections.Generic.List{UMLEditor.Classes.NameTypeObject})">
			<summary>Changes existing parameter list to the provided one </summary>
			<param name="parameters">List of new parameters to use in method</param>
		</member>


-
		<member name="M:UMLEditor.Classes.Method.ParamsToString">
			<summary>Returns the parameter list as a string separated list </summary>
			<returns>A string with a comma separated list of the parameters</returns>
		</member>


-
		<member name="M:UMLEditor.Classes.Method.ToString">
			<summary>Converts method to a string </summary>
			<returns>String representing method</returns>
		</member>


-
		<member name="T:UMLEditor.Classes.NameTypeObject">
			<summary>A generic type that contains two string fields, a name, and a type. </summary>
		</member>


-
		<member name="M:UMLEditor.Classes.NameTypeObject.#ctor">
			<summary>Default ctor </summary>
		</member>


-
		<member name="M:UMLEditor.Classes.NameTypeObject.#ctor(System.String,System.String)">
			<summary>Constructs a parameter with the provided name and type </summary>
			<param name="withType">The name of the type of the parameter</param>
			<param name="withName">The name of the parameter</param>
		</member>


-
		<member name="M:UMLEditor.Classes.NameTypeObject.#ctor(UMLEditor.Classes.NameTypeObject)">
			<summary>Copy constructor </summary>
			<param name="n">NameTypeObject to copy</param>
		</member>


-
		<member name="M:UMLEditor.Classes.Relationship.#ctor">
			<summary>Default ctor </summary>
		</member>


-
		<member name="M:UMLEditor.Classes.Relationship.#ctor(System.String,System.String,System.String)">
			<summary>Constructs a relationship between the two classes </summary>
			<param name="source">The source class in the relationship</param>
			<param name="destination">The destination class in the relationship</param>
			<param name="type">The type of relationship</param>
		</member>


-
		<member name="M:UMLEditor.Classes.Relationship.#ctor(UMLEditor.Classes.Relationship)">
			<summary>Copy constructor </summary>
			<param name="r">Relationship object to copy</param>
		</member>


-
		<member name="M:UMLEditor.Classes.Relationship.IsValidType(System.String)">
			<summary>Helper function to check if a given relationship type is valid </summary>
			<param name="type">The relationship type to check</param>
			<returns/>
			<exception cref="T:UMLEditor.Exceptions.InvalidRelationshipTypeException">If the given type is not valid</exception>
		</member>


-
		<member name="M:UMLEditor.Classes.Relationship.RenameMember(System.String,System.String)">
			<summary>Renames the provided class to the new name, if it is a source or destination class. </summary>
			<param name="className">The class to rename.</param>
			<param name="newName">The new name.</param>
		</member>


-
		<member name="M:UMLEditor.Classes.Relationship.ChangeType(System.String)">
			<summary>Changes the type of a relationship to the given type </summary>
			<param name="newType">The new relationship type</param>
		</member>


-
		<member name="M:UMLEditor.Classes.Relationship.ToString">
			<summary>Overridden function to display relationship as a string </summary>
			<returns>The relationship as [RelationshipType]: [SourceClass] => [DestinationClass]</returns>
		</member>


-
		<member name="M:UMLEditor.Interfaces.IDiagramFile.LoadDiagram(System.String)">
			<summary>Loads a diagram from the provided class </summary>
			<param name="fromFile">The file name to load from</param>
			<returns>The diagram loaded from the provided file</returns>
		</member>


-
		<member name="M:UMLEditor.Interfaces.IDiagramFile.SaveDiagram(UMLEditor.Classes.Diagram@,System.String)">
			<summary>Saves the provided diagram to the provided file.Creates new file if a file by that name does not already exist </summary>
			<param name="toSave">The diagram to save</param>
			<param name="fileName">The file to save the diagram to</param>
		</member>


-
		<member name="M:UMLEditor.Views.CommandLine.PrintColoredLine(System.String,System.ConsoleColor)">
			<summary>Prints the provided text in a specified color. </summary>
			<param name="text">The text to print.</param>
			<param name="inColor">The color you want the text printed in.</param>
		</member>


-
		<member name="M:UMLEditor.Views.MainWindow.InitFileDialogs(Avalonia.Controls.OpenFileDialog@,Avalonia.Controls.SaveFileDialog@,System.String[])">
			<summary>Initializes the provided file selection dialogs with the provided extension filters </summary>
			<param name="openFD">The OpenFileDialog to configure</param>
			<param name="saveFD">The SaveFileDialog to configure</param>
			<param name="filteredExtensions">An array of file extensions that will be selectable in the dialogs.No need for the "." in the extension.</param>
		</member>


-
		<member name="M:UMLEditor.Views.MainWindow.ClearInputBox">
			<summary>Clears the input box in a thread safe manner </summary>
		</member>


-
		<member name="M:UMLEditor.Views.MainWindow.WriteToOutput(System.String,System.Boolean)">
			<summary>Allows writing text to the output box in a thread safe manner </summary>
			<param name="text">The text to write to the output box</param>
			<param name="append">If true, then text will be appended.Otherwise, the output box's text is set to text</param>
		</member>
	</members>
</doc>